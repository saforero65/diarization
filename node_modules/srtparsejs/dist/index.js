var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.js
var src_exports = {};
__export(src_exports, {
  compareTime: () => compareTime,
  getSrtArrayIndex: () => getSrtArrayIndex,
  parse: () => parse,
  setPlayer: () => setPlayer2,
  toMS: () => toMS,
  toSrt: () => toSrt,
  toTime: () => toTime
});
module.exports = __toCommonJS(src_exports);

// src/parser.js
var fixDigit = (how_many_digit, str, padEnd) => {
  if (padEnd === void 0) {
    padEnd = true;
  }
  if (str.length === how_many_digit) {
    return str;
  }
  if (str.length > how_many_digit) {
    return str.slice(0, how_many_digit);
  }
  if (str.length < how_many_digit) {
    if (padEnd) {
      return str.padEnd(how_many_digit, "0");
    } else {
      return str.padStart(how_many_digit, "0");
    }
  }
};
var correctFormat = (time) => {
  let str = time.replace(".", ",");
  let hour = null;
  let minute = null;
  let second = null;
  let millisecond = null;
  let _a = str.split(","), front = _a[0], ms = _a[1];
  millisecond = fixDigit(3, ms);
  let _b = front.split(":"), a_hour = _b[0], a_minute = _b[1], a_second = _b[2];
  hour = fixDigit(2, a_hour, false);
  minute = fixDigit(2, a_minute, false);
  second = fixDigit(2, a_second, false);
  return hour + ":" + minute + ":" + second + "," + millisecond;
};
var tryComma = (data) => {
  data = data.replace(/\r/g, "");
  let regex = /(\d+)\n(\d{1,2}:\d{2}:\d{2},\d{1,3}) --> (\d{1,2}:\d{2}:\d{2},\d{1,3})/g;
  let data_array = data.split(regex);
  data_array.shift();
  return data_array;
};
var tryDot = (data) => {
  data = data.replace(/\r/g, "");
  let regex = /(\d+)\n(\d{1,2}:\d{2}:\d{2}\.\d{1,3}) --> (\d{1,2}:\d{2}:\d{2}\.\d{1,3})/g;
  let data_array = data.split(regex);
  data_array.shift();
  return data_array;
};

// src/player.js
function setPlayer(srtArray, setText) {
  let t = this;
  let player = new class {
    constructor() {
      this.id = -1;
      this.time = "00:00:00,000";
      this.srtArray = srtArray;
      this.setText = setText;
      setText("");
    }
    update(time) {
      this.time = time;
      if (this.id === -1) {
        if (t.compareTime(this.time, this.srtArray[0].startTime, this.srtArray[0].endTime) === 0) {
          this.id = 0;
          this.setText(this.srtArray[0].text);
        }
        return;
      }
      let res = t.compareTime(this.time, this.srtArray[this.id].startTime, this.srtArray[this.id].endTime);
      if (res === 0) {
        return;
      } else {
        let start;
        let end;
        if (res === -1) {
          end = Math.max(this.id - 1, 0);
          start = Math.max(end - 10, 0);
          if (this.id !== 0 && t.compareTime(this.time, this.srtArray[this.id - 1].endTime, this.srtArray[this.id].startTime) === 0) {
            this.setText("");
            return;
          }
        } else {
          start = Math.min(this.id + 1, this.srtArray.length - 1);
          end = Math.min(start + 10, this.srtArray.length - 1);
          if (this.id !== 0 && t.compareTime(this.time, this.srtArray[this.id].endTime, this.srtArray[this.id + 1].startTime) === 0) {
            this.setText("");
            return;
          }
        }
        let index = getSrtArrayIndex(this.srtArray, start, end, this.time);
        if (index === void 0) {
          index = getSrtArrayIndex(this.srtArray, 0, this.srtArray.length - 1, this.time);
          if (index === void 0) {
            this.setText("");
            return;
          }
        }
        this.id = index;
        this.setText(this.srtArray[this.id].text);
      }
    }
    getEndTime() {
      return this.srtArray[this.srtArray.length - 1].endTime;
    }
  }();
  return player;
}

// src/index.js
function parse(srtText) {
  let data_array = tryComma(srtText);
  if (data_array.length === 0) {
    data_array = tryDot(srtText);
  }
  let items = [];
  for (let i = 0; i < data_array.length; i += 4) {
    let new_line = {
      id: data_array[i].trim(),
      startTime: correctFormat(data_array[i + 1].trim()),
      endTime: correctFormat(data_array[i + 2].trim()),
      text: data_array[i + 3].trim()
    };
    items.push(new_line);
  }
  return items;
}
function toSrt(array) {
  let res = "";
  for (let i = 0; i < array.length; i++) {
    let s = array[i];
    res += s.id + "\r\n";
    res += s.startTime + " --> " + s.endTime + "\r\n";
    res += s.text.replace("\n", "\r\n") + "\r\n\r\n";
  }
  return res;
}
function toMS(timeString) {
  let h = Number(timeString.substr(0, 2));
  let m = Number(timeString.substr(3, 2));
  let s = Number(timeString.substr(6, 2));
  let ms = Number(timeString.substr(9, 3));
  return h * 36e5 + m * 6e4 + s * 1e3 + ms;
}
function toTime(timeNumber) {
  let h = ("00" + Math.floor(timeNumber / 36e5)).slice(-2);
  let m = ("00" + Math.floor(timeNumber % 36e5 / 6e4)).slice(-2);
  let s = ("00" + Math.floor(timeNumber % 6e4 / 1e3)).slice(-2);
  let ms = ("000" + Math.floor(timeNumber % 1e3)).slice(-3);
  return h + ":" + m + ":" + s + "," + ms;
}
function compareTime(timeString, startString, endString) {
  let time_ms = toMS(timeString);
  let start_ms = toMS(startString);
  let end_ms = toMS(endString);
  if (time_ms >= start_ms && time_ms <= end_ms) {
    return 0;
  } else if (time_ms < start_ms) {
    return -1;
  } else {
    return 1;
  }
}
function getSrtArrayIndex(srtArray, startindex, endindex, timeString) {
  if (startindex > endindex) {
    return void 0;
  }
  let mid = Math.floor((startindex + endindex) / 2);
  let res = compareTime(timeString, srtArray[mid].startTime, srtArray[mid].endTime);
  if (res === 0) {
    return mid;
  } else if (res === -1) {
    return getSrtArrayIndex(srtArray, startindex, mid - 1, timeString);
  } else {
    return getSrtArrayIndex(srtArray, mid + 1, endindex, timeString);
  }
}
var setPlayer2 = setPlayer;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  compareTime,
  getSrtArrayIndex,
  parse,
  setPlayer,
  toMS,
  toSrt,
  toTime
});
